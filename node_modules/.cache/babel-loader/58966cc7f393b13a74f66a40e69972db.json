{"ast":null,"code":"var _jsxFileName = \"/media/oem/Disco1TB/TRABALHO/TestesEmprego/CISS/front-react/src/components/Api.jsx\";\nimport ListaFuncionarios from \"./ListaFuncionarios\";\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet listaFuncionarios = [{\n  id: 1,\n  nome: \"funcionario 1\",\n  sobrenome: \"silva\",\n  email: \"funcionario1@empersa.com\",\n  numeroNIS: 1111\n}, {\n  id: 2,\n  nome: \"funcionario 2\",\n  sobrenome: \"sauro\",\n  email: \"funcionario2@empersa.com\",\n  numeroNIS: 2222\n}, {\n  id: 3,\n  nome: \"funcionario 3\",\n  sobrenome: \"santos\",\n  email: \"funcionario3@empersa.com\",\n  numeroNIS: 3333\n}, {\n  id: 4,\n  nome: \"funcionario 4\",\n  sobrenome: \"oliveira\",\n  email: \"funcionario4@empersa.com\",\n  numeroNIS: 4444\n}]; // let funcionario = null;\n// if (id) {\n//     let lista = this.consultaListaFuncionarios();\n//     funcionario = lista[id-1];\n// } else {\n//     funcionario = this.getDefaultFuncionario();\n// }\n// return funcionario;\n\nconst baseUrl = 'http://localhost:8080';\nlet Api = {\n  consultaListaFuncionarios: function (callBackFunction) {\n    this.call(baseUrl + \"/funcionario/list\", \"GET\", null, callBackFunction);\n  },\n  loadFuncionario: function (id, callBackFunction) {\n    this.call(baseUrl + \"/funcionario/\" + id, \"GET\", null, callBackFunction);\n  },\n  insertFuncionario: function (funcionario, callBackFunction) {\n    this.call(baseUrl + \"/funcionario/insert\", \"POST\", funcionario, callBackFunction);\n  },\n  updateFuncionario: function (funcionario, callBackFunction) {\n    this.call(baseUrl + \"/funcionario/update\", \"PUT\", funcionario, callBackFunction);\n  },\n  deleteFuncionario: function (funcionario, callBackFunction) {\n    this.call(baseUrl + \"/funcionario/delete\", \"DELETE\", funcionario, callBackFunction);\n  },\n  getDefaultFuncionario: function () {\n    return {}; // id: null, nome: \"\", sobrenome: \"\", email: \"\", numeroNIS: null };\n  },\n  // salvaFuncionario: function(funcionario) {\n  //     listaFuncionarios.push(funcionario);\n  //     ReactDOM.render(<ListaFuncionarios />, document.getElementById('root'));\n  // },\n  fechaCadastro: function (funcionario) {\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(ListaFuncionarios, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }, this), document.getElementById('root'));\n  },\n  deletaFuncionario: function (id) {\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(ListaFuncionarios, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }, this), document.getElementById('root'));\n  },\n  call: async (uri, method, body, fn) => {\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-Path': window.location.pathname\n    };\n    fetch(uri, {\n      method: method,\n      headers: headers,\n      body: body\n    }).then(function (res) {\n      fn.call(res);\n    }).catch(function (res) {\n      console.log(res);\n    });\n  } // open: function (url) {\n  //     window.location.href = url;\n  // },\n  // execute: function (crud, url, fields, complete, global) {\n  //     const _ks_ = {};\n  //     _ks_.global = global;\n  //     _ks_.crud = crud;\n  //     if (crud.sendChanged) {\n  //         _ks_.changed = crud.changed ? crud.changed : {};\n  //     } else {\n  //         _ks_.changed = {};\n  //     }\n  //     _ks_.element = {};\n  //     _ks_.complete = function (res) {\n  //         if (complete) {\n  //             complete.call(this, res);\n  //         }\n  //         if (crud && crud.refresh) {\n  //             crud.refresh();\n  //         }\n  //     };\n  //     _ks_.cfg = {\n  //         url: url,\n  //         fields: fields,\n  //         method: 'GET'\n  //     };\n  //     utils.call(_ks_);\n  // },\n  // print: function (clientId) {\n  //     const print = window.open('', 'PRINT', 'height=400,width=800');\n  //     print.document.body.innerHTML = '<body>' + document.getElementById(clientId).innerHTML + '</body>';\n  //     print.document.close(); // necessary for IE >= 10\n  //     print.focus(); // necessary for IE >= 10*/\n  //     print.print();\n  //     print.close();\n  // },\n  // onlyNumber: function (v, money) {\n  //     if (typeof v === 'undefined' || v === null) {\n  //         v = '';\n  //     }\n  //     v = v + '';\n  //     v = v.replace('.', ',');\n  //     let split = v.split('');\n  //     let nv = '';\n  //     for (const i in split) {\n  //         const so = split[i];\n  //         const vi = parseInt(so);\n  //         if (money && ','.indexOf(so) >= 0 && nv.indexOf(',') < 0) {\n  //             nv = nv + so;\n  //         } else if (!isNaN(vi)) {\n  //             nv = nv + vi;\n  //         }\n  //     }\n  //     return nv;\n  // },\n  // parseMoney: function (prefix, n) {\n  //     if (!n) {\n  //         n = '';\n  //     }\n  //     let v = utils.onlyNumber(n, true);\n  //     v = (v + '').replace('.', ',');\n  //     return prefix + ' ' + v;\n  // },\n  // appyMask: function (value, mask) {\n  //     let numbers = utils.onlyNumber(value);\n  //     let maskSplit = mask.split('');\n  //     let nv = '';\n  //     let count = 0;\n  //     for (const i in maskSplit) {\n  //         const vi = maskSplit[i];\n  //         let ch = vi;\n  //         if ('1234567890?'.indexOf(vi) >= 0) {\n  //             if (numbers[count]) {\n  //                 let a = parseInt(numbers[count]);\n  //                 let b = parseInt(vi);\n  //                 if (a > b) {\n  //                     ch = '';\n  //                 } else {\n  //                     ch = numbers[count];\n  //                 }\n  //             } else {\n  //                 ch = '';\n  //             }\n  //             count++;\n  //         }\n  //         if (numbers.length >= count) {\n  //             nv = nv + ch;\n  //         }\n  //     }\n  //     if (nv.indexOf(value) >= 0) {\n  //         return value;\n  //     }\n  //     if (nv && nv.length > 0) {\n  //         let v = parseInt(nv.substr(nv.length - 1, nv.length));\n  //         if (isNaN(v)) {\n  //             return nv.substr(0, nv.length - 1);\n  //         }\n  //     }\n  //     return nv;\n  // },\n  // contains: function (query, str, separator) {\n  //     if (!query || !str) {\n  //         return false;\n  //     }\n  //     if (!separator) {\n  //         separator = '|';\n  //     }\n  //     if (str.indexOf(separator) < 0) {\n  //         str = separator + str + separator;\n  //     }\n  //     return query.indexOf(str) >= 0;\n  // },\n  // getPathId: function (pos) {\n  //     const path = window.location.pathname;\n  //     const split = path.split('/');\n  //     let id = 0;\n  //     if (split.length > pos) {\n  //         try {\n  //             id = parseInt(split[pos]);\n  //             if (!(id > 0)) {\n  //                 id = 0;\n  //             }\n  //         } catch (x) {\n  //         }\n  //     }\n  //     return id;\n  // },\n  // getPath: function (pos) {\n  //     const path = window.location.pathname;\n  //     const split = path.split('/');\n  //     if (split.length > pos) {\n  //         return split[pos];\n  //     }\n  //     return '';\n  // },\n  // getParam: function (key) {\n  //     var url_string = window.location.href;\n  //     var url = new URL(url_string);\n  //     return url.searchParams.get(key);\n  // },\n  // clone: function (args) {\n  //     const json = JSON.stringify(args);\n  //     return JSON.parse(json);\n  // },\n  // copy: function (elementId) {\n  //     // Create an auxiliary hidden input\n  //     var aux = document.createElement(\"input\");\n  //     // Get the text from the element passed into the input\n  //     aux.setAttribute(\"value\", document.getElementById(elementId).innerHTML);\n  //     // Append the aux input to the body\n  //     document.body.appendChild(aux);\n  //     // Highlight the content\n  //     aux.select();\n  //     // Execute the copy command\n  //     document.execCommand(\"copy\");\n  //     // Remove the input from the body\n  //     document.body.removeChild(aux);\n  //     window.dialog.alert('Copiado para área de transferência');\n  // },\n  // close: function (tab) {\n  //     let cur = utils.getTab();\n  //     let back = tab.back;\n  //     let a = {};\n  //     let tabs = utils.getTabs();\n  //     tabs.forEach(e => {\n  //         a[e.key] = e;\n  //     });\n  //     let same = (cur && tab.key === cur.key);\n  //     delete a[tab.key];\n  //     tabs = [];\n  //     for (const i in a) {\n  //         if (a[i]) {\n  //             tab = a[i];\n  //             tabs.push(tab);\n  //         }\n  //     }\n  //     localStorage.setItem('tabs', JSON.stringify(tabs));\n  //     if (a[back]) {\n  //         utils.open(a[back]);\n  //     } else {\n  //         utils.open(tab);\n  //     }\n  //     return false;\n  // },\n  // getTab: function () {\n  //     let str = localStorage.getItem('tab');\n  //     let tab = null;\n  //     if (str) {\n  //         tab = JSON.parse(str);\n  //     }\n  //     return tab;\n  // },\n  // getTabs: function () {\n  //     let str = localStorage.getItem('tabs');\n  //     let tabs = [];\n  //     if (str) {\n  //         tabs = JSON.parse(str);\n  //     }\n  //     return tabs;\n  // },\n  // addTab: function (b) {\n  //     let old = utils.getTab();\n  //     let back = null;\n  //     let tabs = utils.getTabs();\n  //     let a = {};\n  //     if (old) {\n  //         back = old.key;\n  //     }\n  //     if (!b.key) {\n  //         if (b.id >= 0) {\n  //             b.key = b.entity + '_' + b.id;\n  //         } else {\n  //             delete b.id;\n  //             b.key = b.entity;\n  //         }\n  //     }\n  //     tabs.forEach(e => {\n  //         a[e.key] = e;\n  //     });\n  //     if (!a[b.key]) {\n  //         a[b.key] = b;\n  //         b.back = back;\n  //         tabs.push(b);\n  //     } else if (b.refresh !== false) {\n  //         const o = a[b.key];\n  //         if (b.label) {\n  //             o.label = b.label;\n  //         }\n  //         b = o;\n  //     } else {\n  //         b = a[b.key];\n  //     }\n  //     localStorage.setItem('tabs', JSON.stringify(tabs));\n  //     localStorage.setItem('tab', JSON.stringify(b));\n  //     return tabs;\n  // },\n  // open: function (b) {\n  //     let url = '/home';\n  //     if (b.view) {\n  //         url = b.view;\n  //     } else if (b.url) {\n  //         url = b.url;\n  //     } else if (b.path) {\n  //         url = b.path;\n  //     } else if (b.entity) {\n  //         if (b.id) {\n  //             url = '/crud/' + b.entity + '/' + b.id;\n  //         } else {\n  //             url = '/crud/' + b.entity + '/';\n  //         }\n  //     }\n  //     window.location.href = url;\n  // },\n  // get: (field, _data_) => {\n  //     try {\n  //         return eval('_data_.' + field);\n  //     } catch (error) {\n  //     }\n  //     return null;\n  // },\n  // set: (field, data, val, merge) => {\n  //     try {\n  //         const split = field.split('.');\n  //         let a2 = data;\n  //         let s = split.length;\n  //         for (let i = 0; i < s; i++) {\n  //             const a = split[i];\n  //             if (i == s - 1) {\n  //                 if (val != null && typeof val === 'object' && !val.push && merge) {\n  //                     if (!a2[a]) {\n  //                         a2[a] = {};\n  //                     }\n  //                     for (const vi in val) {\n  //                         a2[a][vi] = val[vi];\n  //                     }\n  //                 } else {\n  //                     a2[a] = val;\n  //                 }\n  //             } else {\n  //                 if (!a2[a]) {\n  //                     a2[a] = {};\n  //                 }\n  //                 a2 = a2[a];\n  //             }\n  //         }\n  //     } catch (error) {\n  //     }\n  // },\n  // getUser: function () {\n  //     let jsonUser = localStorage.getItem('user');\n  //     let user = {};\n  //     if (jsonUser) {\n  //         user = JSON.parse(jsonUser);\n  //         window.user = user;\n  //     }\n  //     return user;\n  // },\n  // decode: (element, crud, data) => {\n  //     let decoded = {};\n  //     let user = utils.getUser();\n  //     let nvl = function (a, b) {\n  //         if (a === null || typeof a === 'undefined' || a === '') {\n  //             return b;\n  //         }\n  //         return a;\n  //     }\n  //     let last = function (list, b) {\n  //         let v = null;\n  //         if (list) {\n  //             for (const i in list) {\n  //                 v = list[i];\n  //             }\n  //         }\n  //         return v;\n  //     }\n  //     let exists = function (obj, key) {\n  //         if (typeof obj === 'object') {\n  //             try {\n  //                 let v = eval('obj.' + key);\n  //                 if (v != null && typeof v !== 'undefined') {\n  //                     if (typeof v === 'string' && v.trim() === '') {\n  //                         return false;\n  //                     }\n  //                     return true;\n  //                 }\n  //             } catch (error) {\n  //             }\n  //         }\n  //         return false;\n  //     };\n  //     let isEmpty = function (obj) {\n  //         if (typeof obj === 'string' && (obj + '').trim() !== '') {\n  //             return false;\n  //         }\n  //         return true;\n  //     };\n  //     let sizeOf = function (list) {\n  //         if (typeof list === 'object' && list.push) {\n  //             return list.length;\n  //         }\n  //         return 0;\n  //     };\n  //     window.isEmpty = isEmpty;\n  //     window.empty = isEmpty;\n  //     window.exists = exists;\n  //     window.sizeOf = sizeOf;\n  //     window.nvl = nvl;\n  //     window.last = last;\n  //     if (typeof element === 'object' && element !== null) {\n  //         let vars = '';\n  //         if (element.itemVar) {\n  //             vars += 'let ' + element.itemVar + ' = data; ';\n  //         }\n  //         for (const ki in data) {\n  //             if ('|crud|new|edit|'.indexOf('|' + ki + '|') < 0) {\n  //                 vars += 'let ' + ki + ' = data.' + ki + '; ';\n  //             }\n  //         }\n  //         for (const k in element) {\n  //             const a = element[k];\n  //             let c = '|' + k + '|';\n  //             let b = a;\n  //             if ('|elements|'.indexOf(c) < 0 && '|columns|'.indexOf(c) < 0 && '|filters|'.indexOf(c) < 0) {\n  //                 if (typeof a === 'string') {\n  //                     b = b.replaceAll('${', '#{');\n  //                     b = b.replaceAll('_this_', 'crud');\n  //                     b = b.replaceAll('@this', 'data');\n  //                     b = b.replaceAll('is empty ', '\"\" == ');\n  //                     b = b.replaceAll('not empty ', '\"\" != ');\n  //                     b = b.replaceAll('\\n', ' ');\n  //                     b = b.replaceAll(' eq ', ' == ');\n  //                     b = b.replaceAll(' ne ', ' != ');\n  //                     b = b.replaceAll(' or ', ' || ');\n  //                     b = b.replaceAll('empty ', '\"\" == ');\n  //                     b = b.replaceAll('obj', 'data');\n  //                     let _c_ = 0;\n  //                     if (b.indexOf('#{') > 0) {\n  //                         const regex = /#\\{([\\w.=!>< ?:'\"-_ÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑáàâãéèêíïóôõöúçñ]{1,})\\}/gm;\n  //                         let m;\n  //                         let val = null;\n  //                         let a = b;\n  //                         while ((m = regex.exec(a)) !== null) {\n  //                             if (m.index === regex.lastIndex) {\n  //                                 regex.lastIndex++;\n  //                             }\n  //                             const find = m[0];\n  //                             const match = m[1];\n  //                             try {\n  //                                 val = eval(match);\n  //                             } catch (e) {\n  //                                 val = '';\n  //                             }\n  //                             b = b.replaceAll(find, val + '');\n  //                             _c_ = _c_ + 1;\n  //                         }\n  //                     } else if (b.indexOf('#{') >= 0) {\n  //                         const ex = b.substring(2, b.length - 1);\n  //                         try {\n  //                             b = eval(vars + '' + ex);\n  //                         } catch (error) {\n  //                             b = '';\n  //                         }\n  //                     } else if (b.indexOf('{') >= 0) {\n  //                         //                            for (const i in data) {\n  //                         //                                let xi = data[i];\n  //                         //                                let xv = '{' + i + '}';\n  //                         //\n  //                         //                                if (b.indexOf(xv) >= 0) {\n  //                         //                                    b = b.replace(xv, xi + '');\n  //                         //                                }\n  //                         //                            }\n  //                     }\n  //                     if (typeof b === 'string') {\n  //                         b = b.replaceAll('undefined', '');\n  //                     }\n  //                 } else if (typeof a === 'object') {\n  //                     if (a != null && a.push) {\n  //                         const ax = [];\n  //                         for (const i in b) {\n  //                             const bi = utils.decode(b[i], crud, data)\n  //                             ax.push(bi);\n  //                         }\n  //                         b = ax;\n  //                     } else {\n  //                         b = utils.decode(b, crud, data);\n  //                     }\n  //                 }\n  //                 decoded[k] = b;\n  //             }\n  //         }\n  //     }\n  //     return decoded;\n  // },\n  // lng: (key, value) => {\n  //     if (typeof window.dicionario !== 'undefined' && key) {\n  //         if (window.dicionario[key]) {\n  //             return window.dicionario[key];\n  //         }\n  //     }\n  //     return value;\n  // },\n  // label: (data) => {\n  //     const keys = ['nome', 'descricao', 'chave'];\n  //     for (const i in keys) {\n  //         const k = keys[i];\n  //         const v = data[k];\n  //         if (v) {\n  //             return v;\n  //         }\n  //     }\n  //     for (const i in data) {\n  //         const v = data[i];\n  //         if (typeof v === 'object') {\n  //             const x = utils.label(v);\n  //             if (x) {\n  //                 return x;\n  //             }\n  //         }\n  //     }\n  //     return null;\n  // },\n  // resolveField: (field, data) => {\n  //     if (!field) {\n  //         field = 'id';\n  //     }\n  //     let v = data[field];\n  //     if (field && field.indexOf('.') >= 0) {\n  //         try {\n  //             v = eval('data.' + field);\n  //         } catch (error) {\n  //             return '';\n  //         }\n  //     }\n  //     if (field === 'cliente' && data.cliente && data.cliente.pessoa) {\n  //         try {\n  //             v = data.cliente.pessoa;\n  //         } catch (error) {\n  //             return '';\n  //         }\n  //     }\n  //     if (typeof v === 'undefined') {\n  //         v = '';\n  //     }\n  //     if (typeof v === 'boolean') {\n  //         return v ? 'Sim' : 'Não';\n  //     } else if (typeof v === 'object') {\n  //         if (v !== null) {\n  //             if (v.length > 0) {\n  //                 v = v[0];\n  //             }\n  //             const keys = ['nome', 'descricao', 'chave', 'numero'];\n  //             for (const i in keys) {\n  //                 const n = keys[i];\n  //                 if (v[n]) {\n  //                     return v[n];\n  //                 }\n  //             }\n  //             let label = [];\n  //             for (const i in v) {\n  //                 const n = v[i];\n  //                 if (typeof n === 'object') {\n  //                     const keys = ['nome', 'descricao', 'chave', 'numero'];\n  //                     for (const i in keys) {\n  //                         const ki = keys[i];\n  //                         if (n[ki]) {\n  //                             label.push(n[ki]);\n  //                         }\n  //                     }\n  //                 }\n  //             }\n  //             if (label.length > 0) {\n  //                 return label.join(' - ');\n  //             }\n  //             if (v.codigo) {\n  //                 label.push(v.codigo + '');\n  //             } else if (v.id) {\n  //                 label.push(v.id + '');\n  //             }\n  //             for (const i in v) {\n  //                 if ('|id|codigo|senha|passswod|'.indexOf('|' + i + '|') < 0) {\n  //                     const n = v[i];\n  //                     if (typeof n === 'string' && n && label.length < 2) {\n  //                         label.push(n);\n  //                     }\n  //                 }\n  //             }\n  //             if (label.length > 0) {\n  //                 return label.join(' - ');\n  //             }\n  //         }\n  //     } else {\n  //         return v;\n  //     }\n  // },\n  // resolve: (element, data) => {\n  //     if (element.value) {\n  //     } else {\n  //         let field = element.field ? element.field : element.name;\n  //         let v = utils.resolveField(field, data);\n  //         if (element.format === 'money') {\n  //             v = utils.money(v);\n  //         }\n  //         if (element.format === 'number') {\n  //             v = utils.number(v, element.decimalCount ? element.decimalCount : 2);\n  //         }\n  //         return v;\n  //     }\n  //     if (data.codigo) {\n  //         return data.codigo;\n  //     }\n  //     if (data.id) {\n  //         return data.id;\n  //     }\n  //     return '';\n  // },\n  // prompt: function (cfg, _execute_, _cancel_) {\n  //     if (cfg) {\n  //         if (cfg.prompt) {\n  //             const dialog = window.dialog;\n  //             const msg = utils.lng(cfg.prompt, cfg.prompt);\n  //             const actions = [];\n  //             actions.push(\n  //                 {\n  //                     label: 'CANCELAR',\n  //                     action: function () {\n  //                         if (_cancel_) {\n  //                             _cancel_();\n  //                         }\n  //                     }\n  //                 }, {\n  //                 label: 'CONFIRMAR',\n  //                 action: _execute_\n  //             });\n  //             if (dialog) {\n  //                 dialog.alert(msg, null, actions);\n  //             } else {\n  //                 _execute_();\n  //             }\n  //         } else {\n  //             _execute_();\n  //         }\n  //     } else if (_execute_) {\n  //         _execute_();\n  //     }\n  // },\n  // loadLanguage: function (view) {\n  // },\n  // merge: function (origem, destino) {\n  //     for (const i in origem) {\n  //         let va = origem[i];\n  //         let vb = destino[i];\n  //         if (va == null || typeof va !== 'object') {\n  //             destino[i] = va;\n  //         } else {\n  //             if (typeof vb === 'undefined') {\n  //                 vb = {};\n  //                 destino[i] = vb;\n  //             }\n  //             utils.merge(va, vb);\n  //         }\n  //     }\n  // },\n  // money: function (amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\n  //     try {\n  //         return 'R$ ' + this.number(amount, decimalCount, decimal, thousands);\n  //     } catch (e) {\n  //         console.log(e)\n  //     }\n  //     return '';\n  // },\n  // number: function (amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\n  //     try {\n  //         decimalCount = Math.abs(decimalCount);\n  //         decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n  //         const negativeSign = amount < 0 ? \"-\" : \"\";\n  //         let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n  //         let j = (i.length > 3) ? i.length % 3 : 0;\n  //         return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  //     } catch (e) {\n  //         console.log(e)\n  //     }\n  //     return '';\n  // },\n  // open: function (b) {\n  //     let url = '/home';\n  //     if (b.view) {\n  //         url = b.view;\n  //     } else if (b.url) {\n  //         url = b.url;\n  //     } else if (b.path) {\n  //         url = b.path;\n  //     } else if (b.entity) {\n  //         if (b.id) {\n  //             url = '/crud/' + b.entity + '/' + b.id;\n  //         } else {\n  //             url = '/crud/' + b.entity + '/';\n  //         }\n  //     }\n  //     window.location.href = url;\n  // },\n  // execute: function (crud, url, fields, complete, global) {\n  //     const _ks_ = {};\n  //     _ks_.global = global;\n  //     _ks_.crud = crud;\n  //     if (crud.sendChanged) {\n  //         _ks_.changed = crud.changed ? crud.changed : {};\n  //     } else {\n  //         _ks_.changed = {};\n  //     }\n  //     _ks_.element = {};\n  //     _ks_.complete = function (res) {\n  //         if (complete) {\n  //             complete.call(this, res);\n  //         }\n  //         if (crud && crud.refresh) {\n  //             crud.refresh();\n  //         }\n  //     };\n  //     _ks_.cfg = {\n  //         url: url,\n  //         fields: fields,\n  //         method: 'GET'\n  //     };\n  //     utils.call(_ks_);\n  // },\n  // call: async (_args_) => {\n  //     const global = _args_.global === true;\n  //     const element = _args_.element ? _args_.element : {};\n  //     const cfg = _args_.cfg;\n  //     const complete = _args_.complete ? _args_.complete : cfg.complete;\n  //     let onerror = _args_.onerror;\n  //     const onstart = _args_.onstart;\n  //     let cache = cfg.cache;\n  //     let data = {};\n  //     let idioma = {};\n  //     let changed = _args_.changed;\n  //     let params = {};\n  //     let redirect = cfg.redirect;\n  //     if (!onerror) {\n  //         onerror = cfg.onerror;\n  //     }\n  //     if (_args_.data) {\n  //         for (const i in _args_.data) {\n  //             data[i] = _args_.data[i];\n  //         }\n  //     }\n  //     const validate = _args_.validate;\n  //     const crud = _args_.crud;\n  //     const view = window.view;\n  //     const dialog = window.dialog;\n  //     const parentId = _args_.parent ? _args_.parent : 0;\n  //     let jsonIdioma = localStorage.getItem('idioma');\n  //     if (jsonIdioma) {\n  //         idioma = JSON.parse(jsonIdioma);\n  //     }\n  //     if (crud && validate) {\n  //         let ok = true;\n  //         for (const i in crud.elements) {\n  //             const a = crud.elements[i];\n  //             if (a.isRequired()) {\n  //                 ok = false;\n  //             }\n  //         }\n  //         if (!ok) {\n  //             if (dialog) {\n  //                 dialog.alert('Alguns erros foram encontrados', onerror);\n  //             } else if (onerror) {\n  //                 onerror.call(this);\n  //             }\n  //             return;\n  //         }\n  //     }\n  //     if (!data) {\n  //         data = {};\n  //     }\n  //     if (!changed) {\n  //         changed = {};\n  //     }\n  //     let customParams = false;\n  //     const merge = {};\n  //     for (const i in data) {\n  //         merge[i] = data[i];\n  //     }\n  //     for (const i in changed) {\n  //         merge[i] = changed[i];\n  //     }\n  //     if (cfg.send) {\n  //         let send = cfg.send;\n  //         if (!send.push) {\n  //             send = utils.decode(cfg.send, crud, merge, {});\n  //         }\n  //         if (send) {\n  //             for (const x in send) {\n  //                 let c = x;\n  //                 if (cfg.send.push) {\n  //                     c = send[x];\n  //                 }\n  //                 let a = send[c];\n  //                 let v = merge[a];\n  //                 if (typeof v === 'undefined') {\n  //                     v = a;\n  //                 }\n  //                 if (typeof v === 'undefined') {\n  //                     v = merge[c];\n  //                 }\n  //                 if (typeof v !== 'undefined') {\n  //                     params[c] = v;\n  //                 }\n  //                 customParams = true;\n  //             }\n  //         }\n  //     }\n  //     if (!customParams && cfg.params !== false) {\n  //         for (const i in changed) {\n  //             params[i] = changed[i];\n  //         }\n  //     }\n  //     if (_args_.search) {\n  //         for (const i in _args_.search) {\n  //             params[i] = _args_.search[i];\n  //         }\n  //     }\n  //     const e1 = utils.decode(cfg.params, crud, merge, {});\n  //     if (e1) {\n  //         for (const i in e1) {\n  //             params[i] = e1[i];\n  //         }\n  //     }\n  //     const e2 = utils.decode(element.params, crud, merge, {});\n  //     if (e2) {\n  //         for (const i in e2) {\n  //             params[i] = e2[i];\n  //         }\n  //     }\n  //     if (element.card) {\n  //         params.id_card = element.card;\n  //     }\n  //     if (element.crud) {\n  //         params.id_crud = element.crud;\n  //     }\n  //     let protocol = window.location.protocol;\n  //     let query = '';\n  //     let url = protocol + '//crm.conecteme.com.vc/api/';\n  //     let host = window.location.hostname;\n  //     if (host.indexOf('local') >= 0) {\n  //         url = protocol + '//localhost:8080/api/';\n  //     } else if (host.indexOf('dev') >= 0 || host.indexOf('desenv') >= 0 || host.indexOf('127.0.') >= 0) {\n  //         url = 'https://dev.conecte.com.vc/api/';\n  //     } else {\n  //         url = 'https://api.nipponflex.com/api/';\n  //     }\n  //     if (cfg.base) {\n  //         url = cfg.base;\n  //     }\n  //     //url = protocol + '//stable.conecte.com.vc/api/';\n  //     if (cfg.fields && cfg.fields.length > 0) {\n  //         params.fields = cfg.fields.join(',');\n  //     }\n  //     let method = cfg.method ? cfg.method : 'GET';\n  //     let body = null;\n  //     let res = {};\n  //     let id = data.id ? data.id : 0;\n  //     //element.loading = true;\n  //     let _onComplete_ = function (res) {\n  //         if (typeof complete === 'function') {\n  //             complete.call(this, res);\n  //         } else if (typeof complete === 'string') {\n  //             crud[complete].call(this, res);\n  //         }\n  //         if (!res.error) {\n  //             if (_args_.event !== 'list' && res.data && data) {\n  //                 for (const i in res.data) {\n  //                     data[i] = res.data[i];\n  //                 }\n  //             }\n  //             const _store_ = cfg.store;\n  //             const _define_ = cfg.define;\n  //             if (_define_ || _store_) {\n  //                 if (_define_) {\n  //                     window[_define_] = res.data;\n  //                 }\n  //                 if (typeof _store_ === 'object') {\n  //                     for (const i in _store_) {\n  //                         const v = _store_[i];\n  //                         window[i] = res.data[v];\n  //                         localStorage.setItem(i, JSON.stringify(res.data[v]));\n  //                     }\n  //                 } else {\n  //                     window[_store_] = res.data;\n  //                     if (_store_ && res.data) {\n  //                         localStorage.setItem(_store_, JSON.stringify(res.data));\n  //                     }\n  //                 }\n  //             }\n  //             if (cache && res.data) {\n  //                 localStorage.setItem(cache, JSON.stringify(res.data));\n  //             }\n  //             if (res.token) {\n  //                 localStorage.setItem('token', res.token);\n  //             }\n  //             if (crud && crud.refresh) {\n  //                 crud.refresh();\n  //             }\n  //             if (res.redirect) {\n  //                 window.location.href = res.redirect;\n  //             } else if (typeof redirect === 'string') {\n  //                 if (redirect.indexOf('$') >= 0 || redirect.indexOf('#') >= 0) {\n  //                     const tmp = utils.decode(cfg, crud, merge);\n  //                     redirect = tmp.redirect;\n  //                 }\n  //                 for (const i in merge) {\n  //                     redirect = redirect.replace('{' + i + '}', merge[i]);\n  //                 }\n  //             }\n  //             if (redirect === true) {\n  //                 window.location.reload();\n  //             } else if (typeof redirect === 'string') {\n  //                 window.location.href = redirect;\n  //             }\n  //         } else if (res.status == 403) {\n  //             localStorage.clear();\n  //             window.location.reload();\n  //         }\n  //     };\n  //     let endCall = function (res) {\n  //         if (view && view.loadingEnd && global) {\n  //             view.loadingEnd();\n  //         }\n  //         element.loading = false;\n  //         if (cfg.download) {\n  //             _onComplete_(res);\n  //             var fileURL = URL.createObjectURL(res);\n  //             var link = document.createElement('a');\n  //             link.href = fileURL;\n  //             link.download = cfg.fileName;\n  //             link.click();\n  //             setTimeout(function () {\n  //                 // For Firefox it is necessary to delay revoking the ObjectURL\n  //                 window.URL.revokeObjectURL(data);\n  //             }, 100);\n  //         } else {\n  //             if (typeof res.data === 'undefined') {\n  //                 res.data = [];\n  //             }\n  //             let msg = res.message;\n  //             let _alert_ = cfg.alert !== false;\n  //             if (res.errors && res.errors.length > 0) {\n  //                 msg = '';\n  //                 for (const i in res.errors) {\n  //                     msg += '<div class=\"dlg-msg-error\">' + res.errors[i].message + '</div>';\n  //                 }\n  //             }\n  //             if (msg && _alert_) {\n  //                 const actions = [];\n  //                 actions.push({\n  //                     label: 'CONFIRMAR',\n  //                     action: function () {\n  //                         _onComplete_(res);\n  //                     }\n  //                 })\n  //                 if (dialog) {\n  //                     dialog.alert(msg, null, actions);\n  //                 } else {\n  //                     _onComplete_(res);\n  //                 }\n  //             } else {\n  //                 _onComplete_(res);\n  //             }\n  //         }\n  //     };\n  //     if (idioma.id > 0) {\n  //         params.language = idioma.id;\n  //         if (params.id_pais_selecao) {\n  //             params.id_pais_selecao = idioma.id_pais;\n  //         }\n  //     }\n  //     if (typeof _args_.size !== 'undefined') {\n  //         params.size = _args_.size;\n  //     }\n  //     if (method !== 'GET') {\n  //         const a = _args_.body ? _args_.body : {};\n  //         for (const i in a) {\n  //             params[i] = a[i];\n  //         }\n  //         body = JSON.stringify(params);\n  //     } else if (params) {\n  //         for (const i in params) {\n  //             const v = params[i];\n  //             if (cfg.send !== false || '|size|page|query|fields|'.indexOf(i) > 0) {\n  //                 if (typeof v !== 'undefined' && typeof v !== 'object') {\n  //                     query += i + '=' + encodeURIComponent(v) + '&';\n  //                 } else if (i === 'filters' && v) {\n  //                     for (const ii in v) {\n  //                         const vs = v[ii];\n  //                         query += 'filters[' + ii + ']=' + encodeURIComponent(vs) + '&';\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //         let url = cfg.url;\n  //         if (query && url) {\n  //             if (url.indexOf('?') >= 0) {\n  //                 query = '&' + query;\n  //             } else {\n  //                 query = '?' + query;\n  //             }\n  //         }\n  //     }\n  //     let _execute_ = async function () {\n  //         let tmp = utils.decode(cfg, crud, merge);\n  //         let curl = tmp.url;\n  //         if (!curl) {\n  //             curl = cfg.url;\n  //         }\n  //         if (curl) {\n  //             if (onstart) {\n  //                 onstart.call(this);\n  //             }\n  //             let uri = url + curl + query;\n  //             let token = localStorage.getItem('token');\n  //             if (!token) {\n  //                 token = utils.getParam('token');\n  //             }\n  //             let headers = {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //                 'X-Path': window.location.pathname\n  //             };\n  //             uri = uri.replace('{id}', id);\n  //             uri = uri.replace('{parent}', parentId);\n  //             for (const i in data) {\n  //                 uri = uri.replace('{' + i + '}', data[i]);\n  //             }\n  //             if (token) {\n  //                 headers.Authorization = 'Bearer ' + token;\n  //             }\n  //             if (view && view.loadingStart && global) {\n  //                 view.loadingStart();\n  //             }\n  //             let valCache = null;\n  //             if (cache) {\n  //                 let jsonCache = localStorage.getItem(cache);\n  //                 if (jsonCache) {\n  //                     valCache = JSON.parse(jsonCache);\n  //                 }\n  //             }\n  //             if (valCache) {\n  //                 endCall({ data: valCache, error: false });\n  //             } else if (cfg.await) {\n  //                 let resp = await fetch(uri, {\n  //                     method: method,\n  //                     headers: headers,\n  //                     body: body\n  //                 });\n  //                 res = await resp.json();\n  //                 endCall(res);\n  //             } else {\n  //                 fetch(uri, {\n  //                     method: method,\n  //                     headers: headers,\n  //                     body: body\n  //                 }).then(function (res) {\n  //                     if (cfg.download) {\n  //                         return res.blob();\n  //                     } else {\n  //                         return res.json();\n  //                     }\n  //                 }).then(function (res) {\n  //                     element.loading = false;\n  //                     endCall(res);\n  //                 }).catch(function (res) {\n  //                     console.log(res)\n  //                 });\n  //             }\n  //         } else if (cfg.action) {\n  //             if (cfg.action === 'logout') {\n  //                 endCall({ data: null });\n  //                 localStorage.clear();\n  //                 window.location.reload();\n  //             }\n  //         } else {\n  //             if (typeof redirect === 'string') {\n  //                 if (redirect.indexOf('$') >= 0 || redirect.indexOf('#') >= 0) {\n  //                     redirect = tmp.redirect;\n  //                 }\n  //                 for (const i in merge) {\n  //                     redirect = redirect.replace('{' + i + '}', merge[i]);\n  //                 }\n  //             }\n  //             if (redirect === true) {\n  //                 window.location.reload();\n  //             } else if (typeof redirect === 'string') {\n  //                 window.location.href = redirect;\n  //             }\n  //         }\n  //     }\n  //     utils.prompt(cfg, _execute_, function () {\n  //         element.loading = false;\n  //         if (typeof complete === 'function') {\n  //             complete.call(this, res);\n  //         }\n  //     });\n  // }\n\n};\nexport default Api;","map":{"version":3,"sources":["/media/oem/Disco1TB/TRABALHO/TestesEmprego/CISS/front-react/src/components/Api.jsx"],"names":["ListaFuncionarios","ReactDOM","listaFuncionarios","id","nome","sobrenome","email","numeroNIS","baseUrl","Api","consultaListaFuncionarios","callBackFunction","call","loadFuncionario","insertFuncionario","funcionario","updateFuncionario","deleteFuncionario","getDefaultFuncionario","fechaCadastro","render","document","getElementById","deletaFuncionario","uri","method","body","fn","headers","window","location","pathname","fetch","then","res","catch","console","log"],"mappings":";AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,IAAIC,iBAAiB,GAAG,CACpB;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,eAAf;AAAgCC,EAAAA,SAAS,EAAE,OAA3C;AAAoDC,EAAAA,KAAK,EAAE,0BAA3D;AAAuFC,EAAAA,SAAS,EAAE;AAAlG,CADoB,EAEpB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,eAAf;AAAgCC,EAAAA,SAAS,EAAE,OAA3C;AAAoDC,EAAAA,KAAK,EAAE,0BAA3D;AAAuFC,EAAAA,SAAS,EAAE;AAAlG,CAFoB,EAGpB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,eAAf;AAAgCC,EAAAA,SAAS,EAAE,QAA3C;AAAqDC,EAAAA,KAAK,EAAE,0BAA5D;AAAwFC,EAAAA,SAAS,EAAE;AAAnG,CAHoB,EAIpB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,eAAf;AAAgCC,EAAAA,SAAS,EAAE,UAA3C;AAAuDC,EAAAA,KAAK,EAAE,0BAA9D;AAA0FC,EAAAA,SAAS,EAAE;AAArG,CAJoB,CAAxB,C,CAOA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAER,MAAMC,OAAO,GAAG,uBAAhB;AAEA,IAAIC,GAAG,GAAG;AAENC,EAAAA,yBAAyB,EAAE,UAASC,gBAAT,EAA2B;AAClD,SAAKC,IAAL,CAAUJ,OAAO,GAAC,mBAAlB,EAAuC,KAAvC,EAA8C,IAA9C,EAAoDG,gBAApD;AACH,GAJK;AAMNE,EAAAA,eAAe,EAAE,UAASV,EAAT,EAAaQ,gBAAb,EAA+B;AAC5C,SAAKC,IAAL,CAAUJ,OAAO,GAAC,eAAR,GAAwBL,EAAlC,EAAsC,KAAtC,EAA6C,IAA7C,EAAmDQ,gBAAnD;AACH,GARK;AAUNG,EAAAA,iBAAiB,EAAE,UAASC,WAAT,EAAsBJ,gBAAtB,EAAwC;AACvD,SAAKC,IAAL,CAAUJ,OAAO,GAAC,qBAAlB,EAAyC,MAAzC,EAAiDO,WAAjD,EAA8DJ,gBAA9D;AACH,GAZK;AAcNK,EAAAA,iBAAiB,EAAE,UAASD,WAAT,EAAsBJ,gBAAtB,EAAwC;AACvD,SAAKC,IAAL,CAAUJ,OAAO,GAAC,qBAAlB,EAAyC,KAAzC,EAAgDO,WAAhD,EAA6DJ,gBAA7D;AACH,GAhBK;AAkBNM,EAAAA,iBAAiB,EAAE,UAASF,WAAT,EAAsBJ,gBAAtB,EAAwC;AACvD,SAAKC,IAAL,CAAUJ,OAAO,GAAC,qBAAlB,EAAyC,QAAzC,EAAmDO,WAAnD,EAAgEJ,gBAAhE;AACH,GApBK;AAsBNO,EAAAA,qBAAqB,EAAE,YAAW;AAC9B,WAAO,EAAP,CAD8B,CACnB;AACd,GAxBK;AA0BN;AACA;AACA;AACA;AAEAC,EAAAA,aAAa,EAAE,UAASJ,WAAT,EAAsB;AACjCd,IAAAA,QAAQ,CAACmB,MAAT,eAAgB,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAAhB,EAAuCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAvC;AACH,GAjCK;AAmCNC,EAAAA,iBAAiB,EAAE,UAASpB,EAAT,EAAa;AAC5BF,IAAAA,QAAQ,CAACmB,MAAT,eAAgB,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAAhB,EAAuCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAvC;AACH,GArCK;AAuCNV,EAAAA,IAAI,EAAE,OAAOY,GAAP,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,EAA1B,KAAiC;AACnC,QAAIC,OAAO,GAAG;AACV,gBAAU,kBADA;AAEV,sBAAgB,kBAFN;AAGV,gBAAUC,MAAM,CAACC,QAAP,CAAgBC;AAHhB,KAAd;AAKAC,IAAAA,KAAK,CAACR,GAAD,EAAM;AACPC,MAAAA,MAAM,EAAEA,MADD;AAEPG,MAAAA,OAAO,EAAEA,OAFF;AAGPF,MAAAA,IAAI,EAAEA;AAHC,KAAN,CAAL,CAIGO,IAJH,CAIQ,UAAUC,GAAV,EAAe;AACnBP,MAAAA,EAAE,CAACf,IAAH,CAAQsB,GAAR;AACH,KAND,EAMGC,KANH,CAMS,UAAUD,GAAV,EAAe;AACpBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH,KARD;AASH,GAtDK,CAwxyCM,CAAV;AA2yCA,eAAezB,GAAf","sourcesContent":["import ListaFuncionarios from \"./ListaFuncionarios\";\nimport ReactDOM from 'react-dom';\n\nlet listaFuncionarios = [\n    { id: 1, nome: \"funcionario 1\", sobrenome: \"silva\", email: \"funcionario1@empersa.com\", numeroNIS: 1111 },\n    { id: 2, nome: \"funcionario 2\", sobrenome: \"sauro\", email: \"funcionario2@empersa.com\", numeroNIS: 2222 },\n    { id: 3, nome: \"funcionario 3\", sobrenome: \"santos\", email: \"funcionario3@empersa.com\", numeroNIS: 3333 },\n    { id: 4, nome: \"funcionario 4\", sobrenome: \"oliveira\", email: \"funcionario4@empersa.com\", numeroNIS: 4444 }\n];\n\n// let funcionario = null;\n        // if (id) {\n        //     let lista = this.consultaListaFuncionarios();\n        //     funcionario = lista[id-1];\n        // } else {\n        //     funcionario = this.getDefaultFuncionario();\n        // }\n        // return funcionario;\n\nconst baseUrl = 'http://localhost:8080';\n\nlet Api = {\n\n    consultaListaFuncionarios: function(callBackFunction) {\n        this.call(baseUrl+\"/funcionario/list\", \"GET\", null, callBackFunction);\n    },\n\n    loadFuncionario: function(id, callBackFunction) {\n        this.call(baseUrl+\"/funcionario/\"+id, \"GET\", null, callBackFunction);\n    },\n\n    insertFuncionario: function(funcionario, callBackFunction) {\n        this.call(baseUrl+\"/funcionario/insert\", \"POST\", funcionario, callBackFunction);\n    },\n\n    updateFuncionario: function(funcionario, callBackFunction) {\n        this.call(baseUrl+\"/funcionario/update\", \"PUT\", funcionario, callBackFunction);\n    },\n\n    deleteFuncionario: function(funcionario, callBackFunction) {\n        this.call(baseUrl+\"/funcionario/delete\", \"DELETE\", funcionario, callBackFunction);\n    },\n\n    getDefaultFuncionario: function() {\n        return { };// id: null, nome: \"\", sobrenome: \"\", email: \"\", numeroNIS: null };\n    },\n\n    // salvaFuncionario: function(funcionario) {\n    //     listaFuncionarios.push(funcionario);\n    //     ReactDOM.render(<ListaFuncionarios />, document.getElementById('root'));\n    // },\n\n    fechaCadastro: function(funcionario) {\n        ReactDOM.render(<ListaFuncionarios />, document.getElementById('root'));\n    },\n\n    deletaFuncionario: function(id) {\n        ReactDOM.render(<ListaFuncionarios />, document.getElementById('root'));\n    },\n\n    call: async (uri, method, body, fn) => {\n        let headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'X-Path': window.location.pathname\n        };\n        fetch(uri, {\n            method: method,\n            headers: headers,\n            body: body\n        }).then(function (res) {\n            fn.call(res);\n        }).catch(function (res) {\n            console.log(res)\n        });\n    }\n\n    // open: function (url) {\n    //     window.location.href = url;\n    // },\n\n    // execute: function (crud, url, fields, complete, global) {\n    //     const _ks_ = {};\n\n    //     _ks_.global = global;\n    //     _ks_.crud = crud;\n\n    //     if (crud.sendChanged) {\n    //         _ks_.changed = crud.changed ? crud.changed : {};\n    //     } else {\n    //         _ks_.changed = {};\n    //     }\n\n    //     _ks_.element = {};\n\n    //     _ks_.complete = function (res) {\n    //         if (complete) {\n    //             complete.call(this, res);\n    //         }\n\n    //         if (crud && crud.refresh) {\n    //             crud.refresh();\n    //         }\n    //     };\n\n    //     _ks_.cfg = {\n    //         url: url,\n    //         fields: fields,\n    //         method: 'GET'\n    //     };\n    //     utils.call(_ks_);\n    // },\n    \n    // print: function (clientId) {\n    //     const print = window.open('', 'PRINT', 'height=400,width=800');\n\n    //     print.document.body.innerHTML = '<body>' + document.getElementById(clientId).innerHTML + '</body>';\n\n    //     print.document.close(); // necessary for IE >= 10\n    //     print.focus(); // necessary for IE >= 10*/\n    //     print.print();\n    //     print.close();\n    // },\n    // onlyNumber: function (v, money) {\n    //     if (typeof v === 'undefined' || v === null) {\n    //         v = '';\n    //     }\n    //     v = v + '';\n    //     v = v.replace('.', ',');\n\n    //     let split = v.split('');\n    //     let nv = '';\n\n    //     for (const i in split) {\n    //         const so = split[i];\n    //         const vi = parseInt(so);\n\n    //         if (money && ','.indexOf(so) >= 0 && nv.indexOf(',') < 0) {\n    //             nv = nv + so;\n    //         } else if (!isNaN(vi)) {\n    //             nv = nv + vi;\n    //         }\n    //     }\n    //     return nv;\n    // },\n    // parseMoney: function (prefix, n) {\n    //     if (!n) {\n    //         n = '';\n    //     }\n    //     let v = utils.onlyNumber(n, true);\n\n    //     v = (v + '').replace('.', ',');\n\n    //     return prefix + ' ' + v;\n    // },\n    // appyMask: function (value, mask) {\n    //     let numbers = utils.onlyNumber(value);\n    //     let maskSplit = mask.split('');\n    //     let nv = '';\n    //     let count = 0;\n\n    //     for (const i in maskSplit) {\n    //         const vi = maskSplit[i];\n    //         let ch = vi;\n\n    //         if ('1234567890?'.indexOf(vi) >= 0) {\n    //             if (numbers[count]) {\n    //                 let a = parseInt(numbers[count]);\n    //                 let b = parseInt(vi);\n\n    //                 if (a > b) {\n    //                     ch = '';\n    //                 } else {\n    //                     ch = numbers[count];\n    //                 }\n    //             } else {\n    //                 ch = '';\n    //             }\n    //             count++;\n    //         }\n    //         if (numbers.length >= count) {\n    //             nv = nv + ch;\n    //         }\n    //     }\n    //     if (nv.indexOf(value) >= 0) {\n    //         return value;\n    //     }\n    //     if (nv && nv.length > 0) {\n    //         let v = parseInt(nv.substr(nv.length - 1, nv.length));\n\n    //         if (isNaN(v)) {\n    //             return nv.substr(0, nv.length - 1);\n    //         }\n    //     }\n    //     return nv;\n    // },\n    // contains: function (query, str, separator) {\n    //     if (!query || !str) {\n    //         return false;\n    //     }\n    //     if (!separator) {\n    //         separator = '|';\n    //     }\n    //     if (str.indexOf(separator) < 0) {\n    //         str = separator + str + separator;\n    //     }\n    //     return query.indexOf(str) >= 0;\n    // },\n    // getPathId: function (pos) {\n    //     const path = window.location.pathname;\n    //     const split = path.split('/');\n    //     let id = 0;\n\n    //     if (split.length > pos) {\n    //         try {\n    //             id = parseInt(split[pos]);\n\n    //             if (!(id > 0)) {\n    //                 id = 0;\n    //             }\n    //         } catch (x) {\n    //         }\n    //     }\n    //     return id;\n    // },\n    // getPath: function (pos) {\n    //     const path = window.location.pathname;\n    //     const split = path.split('/');\n\n    //     if (split.length > pos) {\n    //         return split[pos];\n    //     }\n    //     return '';\n    // },\n    // getParam: function (key) {\n    //     var url_string = window.location.href;\n\n    //     var url = new URL(url_string);\n\n    //     return url.searchParams.get(key);\n    // },\n    // clone: function (args) {\n    //     const json = JSON.stringify(args);\n\n    //     return JSON.parse(json);\n    // },\n    // copy: function (elementId) {\n\n    //     // Create an auxiliary hidden input\n    //     var aux = document.createElement(\"input\");\n\n    //     // Get the text from the element passed into the input\n    //     aux.setAttribute(\"value\", document.getElementById(elementId).innerHTML);\n\n    //     // Append the aux input to the body\n    //     document.body.appendChild(aux);\n\n    //     // Highlight the content\n    //     aux.select();\n\n    //     // Execute the copy command\n    //     document.execCommand(\"copy\");\n\n    //     // Remove the input from the body\n    //     document.body.removeChild(aux);\n    //     window.dialog.alert('Copiado para área de transferência');\n    // },\n    // close: function (tab) {\n    //     let cur = utils.getTab();\n    //     let back = tab.back;\n    //     let a = {};\n    //     let tabs = utils.getTabs();\n\n    //     tabs.forEach(e => {\n    //         a[e.key] = e;\n    //     });\n\n    //     let same = (cur && tab.key === cur.key);\n\n    //     delete a[tab.key];\n\n    //     tabs = [];\n\n    //     for (const i in a) {\n    //         if (a[i]) {\n    //             tab = a[i];\n\n    //             tabs.push(tab);\n    //         }\n    //     }\n    //     localStorage.setItem('tabs', JSON.stringify(tabs));\n\n    //     if (a[back]) {\n    //         utils.open(a[back]);\n    //     } else {\n    //         utils.open(tab);\n    //     }\n    //     return false;\n    // },\n    // getTab: function () {\n    //     let str = localStorage.getItem('tab');\n    //     let tab = null;\n\n    //     if (str) {\n    //         tab = JSON.parse(str);\n    //     }\n    //     return tab;\n    // },\n    // getTabs: function () {\n    //     let str = localStorage.getItem('tabs');\n    //     let tabs = [];\n\n    //     if (str) {\n    //         tabs = JSON.parse(str);\n    //     }\n    //     return tabs;\n    // },\n    // addTab: function (b) {\n    //     let old = utils.getTab();\n    //     let back = null;\n    //     let tabs = utils.getTabs();\n    //     let a = {};\n\n    //     if (old) {\n    //         back = old.key;\n    //     }\n\n    //     if (!b.key) {\n    //         if (b.id >= 0) {\n    //             b.key = b.entity + '_' + b.id;\n    //         } else {\n    //             delete b.id;\n\n    //             b.key = b.entity;\n    //         }\n    //     }\n\n    //     tabs.forEach(e => {\n    //         a[e.key] = e;\n    //     });\n\n    //     if (!a[b.key]) {\n    //         a[b.key] = b;\n\n    //         b.back = back;\n\n    //         tabs.push(b);\n\n    //     } else if (b.refresh !== false) {\n    //         const o = a[b.key];\n\n    //         if (b.label) {\n    //             o.label = b.label;\n    //         }\n\n    //         b = o;\n    //     } else {\n    //         b = a[b.key];\n    //     }\n\n    //     localStorage.setItem('tabs', JSON.stringify(tabs));\n    //     localStorage.setItem('tab', JSON.stringify(b));\n\n    //     return tabs;\n    // },\n    // open: function (b) {\n    //     let url = '/home';\n\n    //     if (b.view) {\n    //         url = b.view;\n    //     } else if (b.url) {\n    //         url = b.url;\n    //     } else if (b.path) {\n    //         url = b.path;\n    //     } else if (b.entity) {\n    //         if (b.id) {\n    //             url = '/crud/' + b.entity + '/' + b.id;\n    //         } else {\n    //             url = '/crud/' + b.entity + '/';\n    //         }\n    //     }\n\n    //     window.location.href = url;\n    // },\n    // get: (field, _data_) => {\n    //     try {\n    //         return eval('_data_.' + field);\n    //     } catch (error) {\n\n    //     }\n    //     return null;\n    // },\n    // set: (field, data, val, merge) => {\n    //     try {\n    //         const split = field.split('.');\n\n    //         let a2 = data;\n    //         let s = split.length;\n\n    //         for (let i = 0; i < s; i++) {\n    //             const a = split[i];\n\n    //             if (i == s - 1) {\n    //                 if (val != null && typeof val === 'object' && !val.push && merge) {\n    //                     if (!a2[a]) {\n    //                         a2[a] = {};\n    //                     }\n    //                     for (const vi in val) {\n    //                         a2[a][vi] = val[vi];\n    //                     }\n    //                 } else {\n    //                     a2[a] = val;\n    //                 }\n    //             } else {\n    //                 if (!a2[a]) {\n    //                     a2[a] = {};\n    //                 }\n    //                 a2 = a2[a];\n    //             }\n\n    //         }\n    //     } catch (error) {\n\n    //     }\n    // },\n    // getUser: function () {\n    //     let jsonUser = localStorage.getItem('user');\n    //     let user = {};\n\n    //     if (jsonUser) {\n    //         user = JSON.parse(jsonUser);\n    //         window.user = user;\n    //     }\n    //     return user;\n    // },\n    // decode: (element, crud, data) => {\n    //     let decoded = {};\n    //     let user = utils.getUser();\n    //     let nvl = function (a, b) {\n\n    //         if (a === null || typeof a === 'undefined' || a === '') {\n    //             return b;\n    //         }\n    //         return a;\n    //     }\n    //     let last = function (list, b) {\n    //         let v = null;\n\n    //         if (list) {\n    //             for (const i in list) {\n    //                 v = list[i];\n    //             }\n    //         }\n    //         return v;\n    //     }\n\n    //     let exists = function (obj, key) {\n    //         if (typeof obj === 'object') {\n    //             try {\n    //                 let v = eval('obj.' + key);\n\n    //                 if (v != null && typeof v !== 'undefined') {\n    //                     if (typeof v === 'string' && v.trim() === '') {\n    //                         return false;\n    //                     }\n    //                     return true;\n    //                 }\n    //             } catch (error) {\n\n    //             }\n    //         }\n    //         return false;\n    //     };\n\n    //     let isEmpty = function (obj) {\n    //         if (typeof obj === 'string' && (obj + '').trim() !== '') {\n    //             return false;\n    //         }\n    //         return true;\n    //     };\n\n    //     let sizeOf = function (list) {\n    //         if (typeof list === 'object' && list.push) {\n    //             return list.length;\n    //         }\n    //         return 0;\n    //     };\n    //     window.isEmpty = isEmpty;\n    //     window.empty = isEmpty;\n    //     window.exists = exists;\n    //     window.sizeOf = sizeOf;\n    //     window.nvl = nvl;\n    //     window.last = last;\n\n\n    //     if (typeof element === 'object' && element !== null) {\n    //         let vars = '';\n\n    //         if (element.itemVar) {\n    //             vars += 'let ' + element.itemVar + ' = data; ';\n    //         }\n\n    //         for (const ki in data) {\n    //             if ('|crud|new|edit|'.indexOf('|' + ki + '|') < 0) {\n    //                 vars += 'let ' + ki + ' = data.' + ki + '; ';\n    //             }\n    //         }\n\n    //         for (const k in element) {\n    //             const a = element[k];\n    //             let c = '|' + k + '|';\n    //             let b = a;\n\n    //             if ('|elements|'.indexOf(c) < 0 && '|columns|'.indexOf(c) < 0 && '|filters|'.indexOf(c) < 0) {\n    //                 if (typeof a === 'string') {\n    //                     b = b.replaceAll('${', '#{');\n    //                     b = b.replaceAll('_this_', 'crud');\n    //                     b = b.replaceAll('@this', 'data');\n    //                     b = b.replaceAll('is empty ', '\"\" == ');\n    //                     b = b.replaceAll('not empty ', '\"\" != ');\n    //                     b = b.replaceAll('\\n', ' ');\n    //                     b = b.replaceAll(' eq ', ' == ');\n    //                     b = b.replaceAll(' ne ', ' != ');\n    //                     b = b.replaceAll(' or ', ' || ');\n    //                     b = b.replaceAll('empty ', '\"\" == ');\n    //                     b = b.replaceAll('obj', 'data');\n\n    //                     let _c_ = 0;\n\n    //                     if (b.indexOf('#{') > 0) {\n    //                         const regex = /#\\{([\\w.=!>< ?:'\"-_ÁÀÂÃÉÈÊÍÏÓÔÕÖÚÇÑáàâãéèêíïóôõöúçñ]{1,})\\}/gm;\n    //                         let m;\n    //                         let val = null;\n    //                         let a = b;\n\n    //                         while ((m = regex.exec(a)) !== null) {\n    //                             if (m.index === regex.lastIndex) {\n    //                                 regex.lastIndex++;\n    //                             }\n    //                             const find = m[0];\n    //                             const match = m[1];\n\n    //                             try {\n    //                                 val = eval(match);\n    //                             } catch (e) {\n    //                                 val = '';\n    //                             }\n    //                             b = b.replaceAll(find, val + '');\n    //                             _c_ = _c_ + 1;\n    //                         }\n    //                     } else if (b.indexOf('#{') >= 0) {\n    //                         const ex = b.substring(2, b.length - 1);\n    //                         try {\n    //                             b = eval(vars + '' + ex);\n    //                         } catch (error) {\n    //                             b = '';\n    //                         }\n\n    //                     } else if (b.indexOf('{') >= 0) {\n    //                         //                            for (const i in data) {\n    //                         //                                let xi = data[i];\n    //                         //                                let xv = '{' + i + '}';\n    //                         //\n    //                         //                                if (b.indexOf(xv) >= 0) {\n    //                         //                                    b = b.replace(xv, xi + '');\n    //                         //                                }\n    //                         //                            }\n    //                     }\n\n    //                     if (typeof b === 'string') {\n    //                         b = b.replaceAll('undefined', '');\n    //                     }\n    //                 } else if (typeof a === 'object') {\n    //                     if (a != null && a.push) {\n    //                         const ax = [];\n\n    //                         for (const i in b) {\n    //                             const bi = utils.decode(b[i], crud, data)\n\n    //                             ax.push(bi);\n    //                         }\n    //                         b = ax;\n    //                     } else {\n    //                         b = utils.decode(b, crud, data);\n    //                     }\n    //                 }\n    //                 decoded[k] = b;\n    //             }\n    //         }\n    //     }\n    //     return decoded;\n    // },\n    // lng: (key, value) => {\n    //     if (typeof window.dicionario !== 'undefined' && key) {\n    //         if (window.dicionario[key]) {\n    //             return window.dicionario[key];\n    //         }\n    //     }\n    //     return value;\n    // },\n    // label: (data) => {\n    //     const keys = ['nome', 'descricao', 'chave'];\n\n    //     for (const i in keys) {\n    //         const k = keys[i];\n    //         const v = data[k];\n\n    //         if (v) {\n    //             return v;\n    //         }\n    //     }\n    //     for (const i in data) {\n    //         const v = data[i];\n\n    //         if (typeof v === 'object') {\n    //             const x = utils.label(v);\n\n    //             if (x) {\n    //                 return x;\n    //             }\n    //         }\n    //     }\n    //     return null;\n    // },\n    // resolveField: (field, data) => {\n    //     if (!field) {\n    //         field = 'id';\n    //     }\n\n    //     let v = data[field];\n\n    //     if (field && field.indexOf('.') >= 0) {\n    //         try {\n    //             v = eval('data.' + field);\n    //         } catch (error) {\n    //             return '';\n    //         }\n    //     }\n\n    //     if (field === 'cliente' && data.cliente && data.cliente.pessoa) {\n    //         try {\n    //             v = data.cliente.pessoa;\n    //         } catch (error) {\n    //             return '';\n    //         }\n    //     }\n\n    //     if (typeof v === 'undefined') {\n    //         v = '';\n    //     }\n\n    //     if (typeof v === 'boolean') {\n    //         return v ? 'Sim' : 'Não';\n    //     } else if (typeof v === 'object') {\n    //         if (v !== null) {\n\n    //             if (v.length > 0) {\n    //                 v = v[0];\n    //             }\n\n    //             const keys = ['nome', 'descricao', 'chave', 'numero'];\n\n    //             for (const i in keys) {\n    //                 const n = keys[i];\n\n    //                 if (v[n]) {\n    //                     return v[n];\n    //                 }\n    //             }\n    //             let label = [];\n\n    //             for (const i in v) {\n    //                 const n = v[i];\n\n    //                 if (typeof n === 'object') {\n    //                     const keys = ['nome', 'descricao', 'chave', 'numero'];\n\n    //                     for (const i in keys) {\n    //                         const ki = keys[i];\n\n    //                         if (n[ki]) {\n    //                             label.push(n[ki]);\n    //                         }\n    //                     }\n    //                 }\n    //             }\n\n    //             if (label.length > 0) {\n    //                 return label.join(' - ');\n    //             }\n\n    //             if (v.codigo) {\n    //                 label.push(v.codigo + '');\n    //             } else if (v.id) {\n    //                 label.push(v.id + '');\n    //             }\n\n    //             for (const i in v) {\n    //                 if ('|id|codigo|senha|passswod|'.indexOf('|' + i + '|') < 0) {\n    //                     const n = v[i];\n\n    //                     if (typeof n === 'string' && n && label.length < 2) {\n    //                         label.push(n);\n    //                     }\n    //                 }\n    //             }\n\n    //             if (label.length > 0) {\n    //                 return label.join(' - ');\n    //             }\n    //         }\n    //     } else {\n    //         return v;\n    //     }\n    // },\n    // resolve: (element, data) => {\n    //     if (element.value) {\n\n    //     } else {\n    //         let field = element.field ? element.field : element.name;\n    //         let v = utils.resolveField(field, data);\n\n    //         if (element.format === 'money') {\n    //             v = utils.money(v);\n    //         }\n    //         if (element.format === 'number') {\n    //             v = utils.number(v, element.decimalCount ? element.decimalCount : 2);\n    //         }\n    //         return v;\n    //     }\n\n    //     if (data.codigo) {\n    //         return data.codigo;\n    //     }\n\n    //     if (data.id) {\n    //         return data.id;\n    //     }\n    //     return '';\n    // },\n    // prompt: function (cfg, _execute_, _cancel_) {\n    //     if (cfg) {\n    //         if (cfg.prompt) {\n    //             const dialog = window.dialog;\n    //             const msg = utils.lng(cfg.prompt, cfg.prompt);\n    //             const actions = [];\n\n    //             actions.push(\n    //                 {\n    //                     label: 'CANCELAR',\n    //                     action: function () {\n    //                         if (_cancel_) {\n    //                             _cancel_();\n    //                         }\n    //                     }\n    //                 }, {\n    //                 label: 'CONFIRMAR',\n    //                 action: _execute_\n    //             });\n    //             if (dialog) {\n    //                 dialog.alert(msg, null, actions);\n    //             } else {\n    //                 _execute_();\n    //             }\n    //         } else {\n    //             _execute_();\n    //         }\n    //     } else if (_execute_) {\n    //         _execute_();\n    //     }\n    // },\n    // loadLanguage: function (view) {\n\n    // },\n    \n    // merge: function (origem, destino) {\n    //     for (const i in origem) {\n    //         let va = origem[i];\n    //         let vb = destino[i];\n\n    //         if (va == null || typeof va !== 'object') {\n    //             destino[i] = va;\n    //         } else {\n    //             if (typeof vb === 'undefined') {\n    //                 vb = {};\n\n    //                 destino[i] = vb;\n    //             }\n    //             utils.merge(va, vb);\n    //         }\n    //     }\n    // },\n    // money: function (amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\n    //     try {\n    //         return 'R$ ' + this.number(amount, decimalCount, decimal, thousands);\n    //     } catch (e) {\n    //         console.log(e)\n    //     }\n    //     return '';\n    // },\n    // number: function (amount, decimalCount = 2, decimal = \",\", thousands = \".\") {\n    //     try {\n    //         decimalCount = Math.abs(decimalCount);\n    //         decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n\n    //         const negativeSign = amount < 0 ? \"-\" : \"\";\n\n    //         let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    //         let j = (i.length > 3) ? i.length % 3 : 0;\n\n    //         return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n    //     } catch (e) {\n    //         console.log(e)\n    //     }\n    //     return '';\n    // },\n\n    // open: function (b) {\n    //     let url = '/home';\n\n    //     if (b.view) {\n    //         url = b.view;\n    //     } else if (b.url) {\n    //         url = b.url;\n    //     } else if (b.path) {\n    //         url = b.path;\n    //     } else if (b.entity) {\n    //         if (b.id) {\n    //             url = '/crud/' + b.entity + '/' + b.id;\n    //         } else {\n    //             url = '/crud/' + b.entity + '/';\n    //         }\n    //     }\n\n    //     window.location.href = url;\n    // },\n    // execute: function (crud, url, fields, complete, global) {\n    //     const _ks_ = {};\n\n    //     _ks_.global = global;\n    //     _ks_.crud = crud;\n\n    //     if (crud.sendChanged) {\n    //         _ks_.changed = crud.changed ? crud.changed : {};\n    //     } else {\n    //         _ks_.changed = {};\n    //     }\n\n    //     _ks_.element = {};\n\n    //     _ks_.complete = function (res) {\n    //         if (complete) {\n    //             complete.call(this, res);\n    //         }\n\n    //         if (crud && crud.refresh) {\n    //             crud.refresh();\n    //         }\n    //     };\n\n    //     _ks_.cfg = {\n    //         url: url,\n    //         fields: fields,\n    //         method: 'GET'\n    //     };\n    //     utils.call(_ks_);\n    // },\n    // call: async (_args_) => {\n    //     const global = _args_.global === true;\n    //     const element = _args_.element ? _args_.element : {};\n    //     const cfg = _args_.cfg;\n    //     const complete = _args_.complete ? _args_.complete : cfg.complete;\n    //     let onerror = _args_.onerror;\n    //     const onstart = _args_.onstart;\n    //     let cache = cfg.cache;\n    //     let data = {};\n    //     let idioma = {};\n    //     let changed = _args_.changed;\n    //     let params = {};\n    //     let redirect = cfg.redirect;\n\n\n    //     if (!onerror) {\n    //         onerror = cfg.onerror;\n    //     }\n\n    //     if (_args_.data) {\n    //         for (const i in _args_.data) {\n    //             data[i] = _args_.data[i];\n    //         }\n    //     }\n\n    //     const validate = _args_.validate;\n    //     const crud = _args_.crud;\n    //     const view = window.view;\n    //     const dialog = window.dialog;\n    //     const parentId = _args_.parent ? _args_.parent : 0;\n\n\n    //     let jsonIdioma = localStorage.getItem('idioma');\n\n    //     if (jsonIdioma) {\n    //         idioma = JSON.parse(jsonIdioma);\n    //     }\n\n\n    //     if (crud && validate) {\n    //         let ok = true;\n\n    //         for (const i in crud.elements) {\n    //             const a = crud.elements[i];\n\n    //             if (a.isRequired()) {\n    //                 ok = false;\n    //             }\n    //         }\n    //         if (!ok) {\n    //             if (dialog) {\n    //                 dialog.alert('Alguns erros foram encontrados', onerror);\n    //             } else if (onerror) {\n    //                 onerror.call(this);\n    //             }\n    //             return;\n    //         }\n    //     }\n    //     if (!data) {\n    //         data = {};\n    //     }\n    //     if (!changed) {\n    //         changed = {};\n    //     }\n\n    //     let customParams = false;\n    //     const merge = {};\n\n    //     for (const i in data) {\n    //         merge[i] = data[i];\n    //     }\n\n    //     for (const i in changed) {\n    //         merge[i] = changed[i];\n    //     }\n\n    //     if (cfg.send) {\n\n    //         let send = cfg.send;\n\n    //         if (!send.push) {\n    //             send = utils.decode(cfg.send, crud, merge, {});\n    //         }\n\n    //         if (send) {\n    //             for (const x in send) {\n    //                 let c = x;\n\n    //                 if (cfg.send.push) {\n    //                     c = send[x];\n    //                 }\n\n    //                 let a = send[c];\n    //                 let v = merge[a];\n\n    //                 if (typeof v === 'undefined') {\n    //                     v = a;\n    //                 }\n\n    //                 if (typeof v === 'undefined') {\n    //                     v = merge[c];\n    //                 }\n\n    //                 if (typeof v !== 'undefined') {\n    //                     params[c] = v;\n    //                 }\n    //                 customParams = true;\n    //             }\n    //         }\n    //     }\n\n    //     if (!customParams && cfg.params !== false) {\n    //         for (const i in changed) {\n    //             params[i] = changed[i];\n    //         }\n    //     }\n\n    //     if (_args_.search) {\n    //         for (const i in _args_.search) {\n    //             params[i] = _args_.search[i];\n    //         }\n    //     }\n\n    //     const e1 = utils.decode(cfg.params, crud, merge, {});\n\n    //     if (e1) {\n    //         for (const i in e1) {\n    //             params[i] = e1[i];\n    //         }\n    //     }\n\n    //     const e2 = utils.decode(element.params, crud, merge, {});\n\n    //     if (e2) {\n    //         for (const i in e2) {\n    //             params[i] = e2[i];\n    //         }\n    //     }\n\n    //     if (element.card) {\n    //         params.id_card = element.card;\n    //     }\n\n    //     if (element.crud) {\n    //         params.id_crud = element.crud;\n    //     }\n\n    //     let protocol = window.location.protocol;\n    //     let query = '';\n    //     let url = protocol + '//crm.conecteme.com.vc/api/';\n    //     let host = window.location.hostname;\n\n    //     if (host.indexOf('local') >= 0) {\n    //         url = protocol + '//localhost:8080/api/';\n    //     } else if (host.indexOf('dev') >= 0 || host.indexOf('desenv') >= 0 || host.indexOf('127.0.') >= 0) {\n    //         url = 'https://dev.conecte.com.vc/api/';\n    //     } else {\n    //         url = 'https://api.nipponflex.com/api/';\n    //     }\n\n    //     if (cfg.base) {\n    //         url = cfg.base;\n    //     }\n\n    //     //url = protocol + '//stable.conecte.com.vc/api/';\n\n    //     if (cfg.fields && cfg.fields.length > 0) {\n    //         params.fields = cfg.fields.join(',');\n    //     }\n\n    //     let method = cfg.method ? cfg.method : 'GET';\n    //     let body = null;\n    //     let res = {};\n    //     let id = data.id ? data.id : 0;\n\n    //     //element.loading = true;\n\n    //     let _onComplete_ = function (res) {\n\n    //         if (typeof complete === 'function') {\n    //             complete.call(this, res);\n    //         } else if (typeof complete === 'string') {\n    //             crud[complete].call(this, res);\n    //         }\n\n    //         if (!res.error) {\n\n    //             if (_args_.event !== 'list' && res.data && data) {\n    //                 for (const i in res.data) {\n    //                     data[i] = res.data[i];\n    //                 }\n    //             }\n\n    //             const _store_ = cfg.store;\n    //             const _define_ = cfg.define;\n\n    //             if (_define_ || _store_) {\n\n    //                 if (_define_) {\n    //                     window[_define_] = res.data;\n    //                 }\n\n    //                 if (typeof _store_ === 'object') {\n    //                     for (const i in _store_) {\n    //                         const v = _store_[i];\n\n    //                         window[i] = res.data[v];\n    //                         localStorage.setItem(i, JSON.stringify(res.data[v]));\n    //                     }\n\n    //                 } else {\n    //                     window[_store_] = res.data;\n\n\n    //                     if (_store_ && res.data) {\n    //                         localStorage.setItem(_store_, JSON.stringify(res.data));\n    //                     }\n    //                 }\n    //             }\n\n    //             if (cache && res.data) {\n    //                 localStorage.setItem(cache, JSON.stringify(res.data));\n    //             }\n\n    //             if (res.token) {\n    //                 localStorage.setItem('token', res.token);\n    //             }\n\n    //             if (crud && crud.refresh) {\n    //                 crud.refresh();\n    //             }\n\n    //             if (res.redirect) {\n    //                 window.location.href = res.redirect;\n    //             } else if (typeof redirect === 'string') {\n\n    //                 if (redirect.indexOf('$') >= 0 || redirect.indexOf('#') >= 0) {\n    //                     const tmp = utils.decode(cfg, crud, merge);\n\n    //                     redirect = tmp.redirect;\n    //                 }\n    //                 for (const i in merge) {\n    //                     redirect = redirect.replace('{' + i + '}', merge[i]);\n    //                 }\n    //             }\n\n    //             if (redirect === true) {\n    //                 window.location.reload();\n    //             } else if (typeof redirect === 'string') {\n    //                 window.location.href = redirect;\n    //             }\n    //         } else if (res.status == 403) {\n    //             localStorage.clear();\n    //             window.location.reload();\n    //         }\n    //     };\n\n    //     let endCall = function (res) {\n    //         if (view && view.loadingEnd && global) {\n    //             view.loadingEnd();\n    //         }\n\n    //         element.loading = false;\n\n    //         if (cfg.download) {\n    //             _onComplete_(res);\n\n    //             var fileURL = URL.createObjectURL(res);\n\n    //             var link = document.createElement('a');\n    //             link.href = fileURL;\n    //             link.download = cfg.fileName;\n    //             link.click();\n    //             setTimeout(function () {\n    //                 // For Firefox it is necessary to delay revoking the ObjectURL\n    //                 window.URL.revokeObjectURL(data);\n    //             }, 100);\n    //         } else {\n\n    //             if (typeof res.data === 'undefined') {\n    //                 res.data = [];\n    //             }\n    //             let msg = res.message;\n    //             let _alert_ = cfg.alert !== false;\n\n    //             if (res.errors && res.errors.length > 0) {\n    //                 msg = '';\n\n    //                 for (const i in res.errors) {\n    //                     msg += '<div class=\"dlg-msg-error\">' + res.errors[i].message + '</div>';\n    //                 }\n    //             }\n\n    //             if (msg && _alert_) {\n    //                 const actions = [];\n\n    //                 actions.push({\n    //                     label: 'CONFIRMAR',\n    //                     action: function () {\n    //                         _onComplete_(res);\n    //                     }\n    //                 })\n\n    //                 if (dialog) {\n    //                     dialog.alert(msg, null, actions);\n    //                 } else {\n    //                     _onComplete_(res);\n    //                 }\n    //             } else {\n    //                 _onComplete_(res);\n    //             }\n    //         }\n    //     };\n\n    //     if (idioma.id > 0) {\n    //         params.language = idioma.id;\n\n    //         if (params.id_pais_selecao) {\n    //             params.id_pais_selecao = idioma.id_pais;\n    //         }\n    //     }\n\n    //     if (typeof _args_.size !== 'undefined') {\n    //         params.size = _args_.size;\n    //     }\n\n    //     if (method !== 'GET') {\n    //         const a = _args_.body ? _args_.body : {};\n\n    //         for (const i in a) {\n    //             params[i] = a[i];\n    //         }\n\n    //         body = JSON.stringify(params);\n    //     } else if (params) {\n    //         for (const i in params) {\n    //             const v = params[i];\n\n    //             if (cfg.send !== false || '|size|page|query|fields|'.indexOf(i) > 0) {\n    //                 if (typeof v !== 'undefined' && typeof v !== 'object') {\n    //                     query += i + '=' + encodeURIComponent(v) + '&';\n    //                 } else if (i === 'filters' && v) {\n    //                     for (const ii in v) {\n    //                         const vs = v[ii];\n\n    //                         query += 'filters[' + ii + ']=' + encodeURIComponent(vs) + '&';\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //         let url = cfg.url;\n\n    //         if (query && url) {\n    //             if (url.indexOf('?') >= 0) {\n    //                 query = '&' + query;\n    //             } else {\n    //                 query = '?' + query;\n    //             }\n    //         }\n    //     }\n\n    //     let _execute_ = async function () {\n    //         let tmp = utils.decode(cfg, crud, merge);\n    //         let curl = tmp.url;\n\n    //         if (!curl) {\n    //             curl = cfg.url;\n    //         }\n\n    //         if (curl) {\n    //             if (onstart) {\n    //                 onstart.call(this);\n    //             }\n\n    //             let uri = url + curl + query;\n    //             let token = localStorage.getItem('token');\n\n    //             if (!token) {\n    //                 token = utils.getParam('token');\n    //             }\n\n    //             let headers = {\n    //                 'Accept': 'application/json',\n    //                 'Content-Type': 'application/json',\n    //                 'X-Path': window.location.pathname\n    //             };\n\n    //             uri = uri.replace('{id}', id);\n    //             uri = uri.replace('{parent}', parentId);\n\n    //             for (const i in data) {\n    //                 uri = uri.replace('{' + i + '}', data[i]);\n    //             }\n\n    //             if (token) {\n    //                 headers.Authorization = 'Bearer ' + token;\n    //             }\n\n    //             if (view && view.loadingStart && global) {\n    //                 view.loadingStart();\n    //             }\n\n    //             let valCache = null;\n\n    //             if (cache) {\n    //                 let jsonCache = localStorage.getItem(cache);\n\n    //                 if (jsonCache) {\n    //                     valCache = JSON.parse(jsonCache);\n    //                 }\n    //             }\n    //             if (valCache) {\n    //                 endCall({ data: valCache, error: false });\n    //             } else if (cfg.await) {\n    //                 let resp = await fetch(uri, {\n    //                     method: method,\n    //                     headers: headers,\n    //                     body: body\n    //                 });\n\n    //                 res = await resp.json();\n\n    //                 endCall(res);\n    //             } else {\n\n    //                 fetch(uri, {\n    //                     method: method,\n    //                     headers: headers,\n    //                     body: body\n    //                 }).then(function (res) {\n    //                     if (cfg.download) {\n    //                         return res.blob();\n    //                     } else {\n    //                         return res.json();\n    //                     }\n    //                 }).then(function (res) {\n    //                     element.loading = false;\n    //                     endCall(res);\n    //                 }).catch(function (res) {\n    //                     console.log(res)\n    //                 });\n    //             }\n    //         } else if (cfg.action) {\n    //             if (cfg.action === 'logout') {\n    //                 endCall({ data: null });\n    //                 localStorage.clear();\n    //                 window.location.reload();\n    //             }\n    //         } else {\n    //             if (typeof redirect === 'string') {\n\n    //                 if (redirect.indexOf('$') >= 0 || redirect.indexOf('#') >= 0) {\n    //                     redirect = tmp.redirect;\n    //                 }\n    //                 for (const i in merge) {\n    //                     redirect = redirect.replace('{' + i + '}', merge[i]);\n    //                 }\n    //             }\n\n    //             if (redirect === true) {\n    //                 window.location.reload();\n    //             } else if (typeof redirect === 'string') {\n    //                 window.location.href = redirect;\n    //             }\n    //         }\n    //     }\n\n    //     utils.prompt(cfg, _execute_, function () {\n    //         element.loading = false;\n\n    //         if (typeof complete === 'function') {\n    //             complete.call(this, res);\n    //         }\n    //     });\n    // }\n};\n\nexport default Api;"]},"metadata":{},"sourceType":"module"}